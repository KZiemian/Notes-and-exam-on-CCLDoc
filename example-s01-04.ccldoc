;;;   -*- Lisp -*-


(in-package :ccldoc)

(def-definition-type :ccldoc ()
		     :type-name "ccldoc operator"
		     :id-prefix "cd_"
		     :function #'op-name)

(def-expander ccldoc (&optional sym)
  :parser-types (:lisp)
  (if sym
      `(refdef  :ccldoc ,sym)
      "CCLDoc"))

(def-expander dspec-types ()
  `(listing :column
	    ,@(mapcar (lambda (info) `(item (code ,(let ((*print-case* :downcase)) (prin1-to-string (car info))))))
		      (remove :ccldoc *dspec-types*))))

(def-expander docbook-link ()
  '(link "http://docbook.org" "docbook"))

(def-expander tracwiki-link ()
  '(link "http://trac.edgewall.org/wiki" "Trac Wiki"))


;; Use this package to show explicit packages on unexported symbols...
(defpackage :ccldoc-documentation
  (:use :ccldoc :cl)
  #-:ccl (:shadow :block))


(:defsection "Function GENSYM"
    (:defsection "Description"
      "Creates and returns a {param fresh, uninterned symbol}, as if by calling
 make-symbol. (The only difference between gensym and make-symbol is in how
 the new-symbol's name is determined.)

      The name of the new-symbol is the concatenation of a prefix, which defaults to \"G\", and a suffix, which is the decimal representation of a number that defaults to the value of *gensym-counter*.

      If x is supplied, and is a string, then that string is used as a prefix instead of \"G\" for this call to gensym only.

      If x is supplied, and is an integer, then that integer, instead of the value of *gensym-counter*, is used as the suffix for this call to gensym only.

      If and only if no explicit suffix is supplied, *gensym-counter* is incremented after it is used.")


  (:defsection "Notes"
    "The ability to pass a numeric argument to gensym has been deprecated; explicitly binding *gensym-counter* is now stylistically preferred. (The somewhat baroque conventions for the optional argument are historical in nature, and supported primarily for compatibility with older dialects of Lisp. In modern code, it is recommended that the only kind of argument used be a string prefix. In general, though, to obtain more flexible control of the new-symbol's name, consider using make-symbol instead.)")


  (:defsection "Pr√≥ba definicji"

      (:definition (:ccldoc :include-file) "(:include-file filename &key in-package external-format)"
		   ""
		   "The file {param filename} should consist of any number of lisp forms followed by
        {CCLDOC} forms.  The lisp forms are processed as if by {code LOAD} until the first {CCLDOC} form
        is encountered, after which all the remaining forms must be {CCLDOC} forms.  The {CCLDOC} forms are
        included in the document replacing the {code include-file} form itself.
        The {param in-package} parameter can be used to specify the package used to load the file,
        and is entirely equivalent to placing an {code in-package} form at the start of the included file.
        {param external-format} specifies the character encoding of the file")))
